-- Error handling module
waffle.error.init(settings:table) default {dieOnWarning=false, useStderr=true, hideWarnings=false, includeWaffleMessages=true}
waffle.error(error:string)
waffle.warning(warning:string)

-- String Parser module (from Bowuigi/genpar+some extensions)
waffle.parser.find(property:string | number, value:any)
waffle.parser.parse(str:string, tokens:table, result:table)
waffle.parser.filter(str:string, tokens:table, result:string)

-- Class module (uses a modified version of rxi/classic)
waffle.class:instance() | waffle.class()
waffle.class.new()
waffle.class:extend()
waffle.class:print()

-- Objects on the game engine (and their constructors)
Vector2(x:number, y:number)
Vector3(x:number, y:number, z:number)

-- 2D Objects
Thing2D(position:Object(Vector2), rotation:Object(Vector2), speed:Object(Vector2))
Rectangle:extends(Thing2D) (position:Object(Vector2), size:Object(Vector2), rotation:Object(Vector2), speed:Object(Vector2))
Circle:extends(Thing2D) (position:Object(Vector2), radius:number, rotation:Object(Vector2), speed:Object(Vector2))

-- 3D Objects
Thing3D(position:Object(Vector3), rotation:Object(Vector3), speed:Object(Vector3))
Cube:extends(Thing3D) (position:Object(Vector3), size:Object(Vector3), rotation:Object(Vector3), speed:Object(Vector3))
Sphere:extends(Thing3D) (position:Object(Vector3), radius:number, rotation:Object(Vector3), speed:Object(Vector3))

-- Tilemap module (from Bowuigi/tmap)
waffle.tilemap.new(width:number, height:number)
waffle.tilemap:get(x:number,y:number,tile:any)
waffle.tilemap:set(x:number,y:number,tile:any)
waffle.tilemap:fill(startX:number, startY:number, endX:number, endY:number)

-- Expect module
waffle.expect.type(expectedType:string, got:any) | waffle.expect(expectedType:string, got:any)
waffle.expect.table(expectedSize:table, gotSize:table)
waffle.expect.string(expectedLength:number, gotLength:number)

-- Math module
waffle.math.dist(a:Object(Vector2), b:Object(Vector2))
waffle.math.dist3D(a:Object(Vector3),  b:Object(Vector3))
waffle.math.clamp(min:number, value:number, max:number)
waffle.math.lerp(start:number, current:number, end:number)
waffle.math.cerp(start:number, current:number, end:number)
waffle.math.sign(num:number)

-- Collisions module
waffle.collision.circular(a:Object(Circle), b:Object(Circle))
waffle.collision.rectangle(a:Object(Rectangle), b:Object(Rectangle))
waffle.collision.pointIn.circle(point:Object(Point2), circle:Object(Circle))
waffle.collision.pointIn.rectangle(point:Object(Point2), rectangle:Object(Rectangle))
waffle.collision.intersect(a:Object(Segment2), b:Object(Segment2))

-- Update module
waffle.update.movement(objects:table)
